[
  {
    "question": "Why should I use indentation? How do I indent correctly?",
    "answer": "To keep a good overview. Code gets very long quickly and if you don't indent correctly you will find it really hard to keep track of which elements are inside which other elements and which opening and closing tags belong together.<br> Generally speaking you indent everything that's between an opening &#60...&#62 and closing tag &#60/...&#62.<br> An example might look like this:<p><span>&#60parent&#62</span><br> <span class=\"indent1\">&#60first-child&#62</span>some content<span>&#60/first-child&#62</span><br> <span class=\"indent1\">&#60second-child&#62</span>some content<span>&#60/second-child&#62</span><br> <span class=\"indent1\">&#60third-child&#62</span>some content<span>&#60/third-child&#62</span><br> <span>&#60/parent&#62</span></p> Notice how all three children are indented on the same level. That's because their closing tags are before the next opening tag. That's why they are also called siblings because they are all children of the same parents.<br> Just like in a real family children can become parents again. That's how we get multiple indentations: <p><span class=\"orange\">&#60great_grandparent&#62</span><br> <span class=\"indent1 pink\">&#60grandparents1&#62</span><br> <span class=\"indent2 red\">&#60parents1&#62</span><br> <span class=\"indent3 blue\">&#60child1&#62</span><br> <span class=\"indent4 green\">&#60grandchild&#62</span>some content<span class=\"green\">&#60/grandchild&#62</span><br> <span class=\"indent3 blue\">&#60/child1&#62</span><br> <span class=\"indent3 blue\">&#60child2&#62</span><br> <span class=\"indent4 green\">Some content</span><br> <span class=\"indent3 blue\">&#60/child2&#62</span><br> <span class=\"indent2 red\">&#60/parents1&#62</span><br> <span class=\"indent2 red\">&#60parents2&#62</span><br> <span class=\"indent3 blue\">Some content</span><br> <span class=\"indent2 red\">&#60/parents2&#62</span><br> <span class=\"indent1 pink\">&#60/grandparents1&#62</span><br> <span class=\"indent1 pink\">&#60grandparents2&#62</span><br> <span class=\"indent2 red\">Some content</span><br> <span class=\"indent1 pink\">&#60/grandparents2&#62</span><br> <span class=\"orange\">&#60/great_grandparent&#62</span></p> The grandparents are siblings, thus on the same level. The parents are all on the same level. The children are as well and so on.",
    "module": 0
  },
  {
    "question": "What do I need comments for and how do I use them best?",
    "answer": "Commenting is a good way of making your code more readable for yourself and others. Either people who work with you, possible employers or yourself a few weeks after writing the original code, all these people will highly appreciate well commented code. In JavaScript you can use it to explain functionality. In CSS you can use it to separate your code into groups (for example you can put stylings for specific pages in groups seperated by comments). In HTML It is often times extremly useful to put comments behind <strong>every single</strong> closing div tag. When you use Bootstrap it is very likely you end up having 3 or more div closing tags in a row. To keep track of which opening tag they belong to it is a good idea to put a comment behind each one of them with a description of which opening tag they belong to.",
    "module": 0
  },
  {
    "question": "What is the difference between classes and IDs and why/when do I use them?",
    "answer": "All HTML elements can have a class and id attribute. Generally speaking can you name your classes and IDs what ever you want. It doesn't have any influence on your website whatsoever if a class or ID is called 'container', 'beer', 'i_like_trains' or 'padding'. It has only an influence on your layout if you change something in the CSS (but more about that in just a second).<br> The big difference between classes and IDs is that IDs are unique and each HTML element can only have a single ID. Also not two or more HTML elements can have an ID of the same name. They always have to bee different. Classes, however, can be used as often as you like. Any HTML element can have as many classes, just seperated by a space (e.g. &#60div class=\"container beer i_like_trains\"&#62), as you like. And you can use the same class on as many HTML elements as you like.<br> So what are classes and IDs for anyway?<br> With classes and IDs you can very easily address specific HTML elements. You can apply a class to an HTML element and then in your CSS with a dot infront of the class name you can define stylings for all HTML elements that have that particular class. So if you write .padding { padding: 20px; } in your CSS and apply the class 'padding' to several HTML elements all these elements will get a padding of 20px.<br> You can do the same thing with IDs, but since you can use IDs only once, people use classes more commonly for styling. IDs get interesting once you want to work with JavaScript or want to link to certain parts of your HTML page.",
    "module": 1
  },
  {
    "question": "What is 'jumbotron' (Bootstrap)?",
    "answer": "'jumbotron' is a <a href=\"http://getbootstrap.com/components/#jumbotron\" target=\"blank\">predefined class in Bootstrap</a>. It is a component used to catch the attention of your website's user. Generally people put a few lines like a welcome text and maybe a button in there. Do <strong>not</strong> wrap it around all content on your website! That's what a container could be used for.",
    "module": 1
  },
  {
    "question": "What does 'container' do (Bootstrap)?",
    "answer": "'container' is a <a href=\"http://getbootstrap.com/css/#overview-container\" target=\"blank\">predefined class in Bootstrap</a>. Containers are needed if you want to make use of the <a href=\"http://getbootstrap.com/css/#grid\" target=\"blank\">Bootstrap Grid-System</a>. That's why they usually house a big chunk of a pages content. In many cases one container per page is enough. They fill the full width of their parent element. Containers <strong>should not</strong> be nested inside each other.",
    "module": 1
  },
  {
    "question": "How do I use Google Fonts?",
    "answer": "Admittedly Google Fonts are not very intuitive for beginners. With the filters to the right of <a href=\"https://www.google.com/fonts/\" target=\"blank\">their page</a> you can filter the different fonts and look for one you like. Once you found one you click on the second of the three buttons at the bottom of the font (it has a little box with an arrow pointing to the right). This will bring you to a page where you can do final customizations of the font and what you might need. Then you scroll to the third step and cope the link tag. Now you can paste it inside the HTML file where you want to use the font <strong>before</strong> your other link tags that point to your CSS files. The fourth step will show you how to use the font inside your CSS after you embedded it in your HTML file.",
    "module": 1
  },
  {
    "question": "My image is too big and messes up my whole layout.",
    "answer": "You can style images with CSS just as any other HTML elements. The best way to go about it is to use a custom class for the image tag, maybe like this:<br> &#60img src=\"image.jpg\" class=\"my_image\" /&#62 <br> In your CSS you can then <a href=\"http://www.w3schools.com/css/css_dimension.asp\" target=\"blank\">define the dimensions</a> of your image.",
    "module": 1
  },
  {
    "question": "My layout is messed up and I don't know why! / My website has a white area on the right! ",
    "answer": "Bootstrap provides great classes to layout your website. If you use Bootstrap it is important that you follow its rules. You will find that you can do most of your layouting without writing a single line of CSS code.<br> Most mistakes happen because the <a href=\"http://getbootstrap.com/css/#grid\" target=\"blank\">grid system</a> is not used correctly or messed up with custom CSS. Read the <a href=\"http://getbootstrap.com/css/#grid\" target=\"blank\">Bootstrap documentation about their grid system</a>! You will see that you need to have a container(-fluid) if you want to use your grid. A row must be a direct child of a container and all your col- elements must be direct decendents of your row.<br> Also keep in mind that the grid system is there to structure your website into 12 columns. It is like the wooden frame of a painting. It's behind the actual painting to keep it stable but it's invisible for the user. If you want to change padding, margin, height, position or any other layouting styles <strong>do not change Bootstrap's grid-classes (.container(-fluid), .row, .col- etc.)!</strong> That will easily mess up your layout. Rather create a new div for example inside your div with the class .col-xs-12 and give it your own class (e.g. .padding-left). Then you can apply your own padding and positioning styles but don't damage the frame that's supposed to keep your website stable.",
    "module": 2
  },
  {
    "question": "I have problems with positioning my elements! / My navigation is shifted and not full width!",
    "answer": "Keep your HTML code in the same order in which you want to display the content on your website. Code that's all the way at the top of the page should also be all the way at the top in your HTML code (e.g. a header or a navigation bar). Content that's all the way at the bottom (like a footer) should also be all the way at the bottom in your code. Also keep in mind to put something inside an element if it really belongs in there. For example a navigation bar is usually all the way at the top of the page and not part of the content you might keep inside Bootstrap's grid system.",
    "module": 2
  },
  {
    "question": "My website is responsive when I resize my browser window - but not on my phone.",
    "answer": "So that your website is displayed correctly you need to add a meta tag with the name 'viewport' to set the initial scale of your website: <a href=\"http://getbootstrap.com/css/#overview-mobile\" target=\"blank\">http://getbootstrap.com/css/#overview-mobile</a>",
    "module": 2
  },
  {
    "question": "Do I need the normalize.css and Boostrap?",
    "answer": "No. Boostrap has the <a href=\"http://getbootstrap.com/css/#overview-normalize\" target=\"blank\">normalize.css</a> already included.",
    "module": 2
  },
  {
    "question": "What is the difference between the CDN link to boostrap.css and the bootstrap.css file I downloaded and put in my project folder?",
    "answer": "Both files contain exactly the same code. So <strong>never include both files</strong> in your HTML head. The CDN link is faster to work with and can possibly lower load times for your user if he already accessed a website using Bootstrap before. Downloading the bootstrap.css allows you to be independent from other servers. Also you can <a href=\"http://getbootstrap.com/customize/\" target=\"blank\">customize the Bootstrap CSS</a> and take out elements you don't need to save load time.",
    "module": 2
  },
  {
    "question": "Some parts of my JavaScript don't seem to run correctly.",
    "answer": "Check the &#60head&#62 of your website and make sure to put <strong>all</strong> your &#60script&#62 tags <strong>below</strong> your &#60link&#62 tags. JavaScript files always come at the bottom and all your CSS needs to be above them to make sure everything loads properly.",
    "module": 3
  },
  {
    "question": "How do I add JavaScript to my Rails application?",
    "answer": "Just like your CSS JavaScript is handled by the <a href=\"http://guides.rubyonrails.org/asset_pipeline.html\" target=\"blank\">asset pipeline</a>. All JavaScript files you put inside assets/javascript will be ready to be used in your views.",
    "module": 12
  },
  {
    "question": "$(document).ready doesn't seem to work in Rails",
    "answer": "That is correct. This is because Rails uses the <a href=\"http://railscasts.com/episodes/390-turbolinks\" target=\"blank\">turbo links gem</a>. This causes your pages not to load fully but only parts of your page. $(document).ready you can use some alternative code: <a href=\"http://stackoverflow.com/a/18770589/4587875\" target=\"blank\">Here the link to Stackoverflow</a>",
    "module": 12
  },
  {
    "question": "What do I need client side MVCs like Angular.js and Ember.js for?",
    "answer": "This very website is built with Angular.js . Client side MVC frameworks allow your users to interact with your websites content dynamically without accessing any server side code. You can use it to store your websites content in a different place than you website design. This website for example keeps all questions and answers in a single <a href=\"http://json.org/\" target=\"blank\">JSON</a> file. This makes it easy to edit content without having to worry about the layout.",
    "module": 12
  }
]
